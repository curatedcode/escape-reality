---
interface Props {
	quote: string;
	author: string;
	image?: string;
	rating: 1 | 2 | 3 | 4 | 5;
	class?: string;
}

const { quote, author, image, rating, class: userClass } = Astro.props;
---

<div
	class=`rounded-lg bg-gray-900 border text-white border-gray-700 shadow-sm h-full ${userClass}`
>
	<div class="p-6 flex flex-col h-full">
		<div class="flex space-x-1 mb-4">
			{
				Array(5)
					.fill(0)
					.map((_, i) => (
						<svg
							class={
								i < rating ? "w-5 h-5 text-purple-400" : "w-5 h-5 text-gray-600"
							}
							fill="currentColor"
							viewBox="0 0 20 20"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
						</svg>
					))
			}
		</div>
		<blockquote class="text-lg flex-grow italic mb-4">"{quote}"</blockquote>
		<div class="flex items-center">
			{
				image && (
					<div class="mr-3 rounded-full overflow-hidden w-10 h-10 flex-shrink-0">
						<img src={image} alt={author} class="w-full h-full object-cover" />
					</div>
				)
			}
			<div class="flex items-center">
				<p class="font-medium">{author}</p>
			</div>
		</div>
	</div>
</div>
